#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
Front Page
\begin_inset Newpage newpage
\end_inset


\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList figure

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
Software development has evolved from something that is done in your garage
 after work, to the backbone of society.
 This growth has spawned numerous companies, and in turn increased the need
 for structure, planning and working methods that can provide results, regardles
s of project size.
 With the ever increasing market for computers and PCs in general, more
 and more people with malicious intents learned ways to steal and obtain
 information of high value.
 Hacking, creating computer worms and abusing loopholes became an ever increasin
g threat, in a market that seemed to grow endless.
 
\end_layout

\begin_layout Standard
Many companies started up businesses revolving solely around security.
 Norton 
\begin_inset CommandInset citation
LatexCommand cite
key "Norton"

\end_inset

, McAfee 
\begin_inset CommandInset citation
LatexCommand cite
key "McAfee"

\end_inset

 & Avast 
\begin_inset CommandInset citation
LatexCommand cite
key "Avast"

\end_inset

 are some examples of companies that have created various softwares for
 security.
 Mostly virus scanning programs and firewall applications, but security
 related issues still haven't reached a significant part of the planning
 process of software development.
 Instead of repairing damages after an attack, why not prevent them from
 happening in the first place.
 
\end_layout

\begin_layout Standard
This paper will present an idea on how to design a software that would provide
 the means for security analysis at an early stage in software development
 planning, and what it would take to define it as a success.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
The structure of this document is as follows.
 In section 2, we highlight what currently is out there and discuss their
 strength and weaknesses.
 Section 3 summarize needs and artifacts, and in section 4 we will list
 the stakeholders.
 The sucess criteria for these stakeholders are listed and explained in
 section 5, while section 6 explains the artifacts we listed in section
 3 and highlights how to evalute whether or not they could be called a success
 when the project is complete.
 Section 7 gives an overview to the research plan, showing milestones and
 their respective dates.
 Finally, in section 8, we show our conclusion.
\end_layout

\begin_layout Section
Background - State of the Art
\end_layout

\begin_layout Standard
Security related practices and frameworks are split into different camps.
 Some focus on improving security during the implementation phase of software
 development, while others analyse already working applications.
 In this section we will mention some of the methods, standards and tools
 surrounding this subject and highlight the gaps that this thesis would
 try to fill.
\end_layout

\begin_layout Subsection
Methods
\end_layout

\begin_layout Standard
The Microsoft Security Development Lifecycle (SDL) Process is a multi-step
 process for creating secure applications using both risk analysis and thread
 modelling to map security related issues 
\begin_inset CommandInset citation
LatexCommand cite
key "Microsoft"

\end_inset

.
 One of the steps in this seven step process is 
\begin_inset Quotes eld
\end_inset

Perform Dynamic Analysis
\begin_inset Quotes erd
\end_inset

, which includes running a software that monitors an application and checks
 for critical security problems.
 This step is performed with an already running version of an application,
 meaning it is of no use to someone who's still in the planning phase of
 software development.
\end_layout

\begin_layout Standard
A different approach is the Information Security Management System.
 ISMS is a set of policies 
\begin_inset Quotes eld
\end_inset

concerned with information security managment or IT related risks
\begin_inset Quotes erd
\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "ISMS"

\end_inset

.
 ISMS main goal is to minimize risk and reduce the impact a security breach
 on a system could have.
 Where the SDL process revolves around the development of software and creating
 design specifications covering security issues, ISMS focuses more on management.
 Security breaches could happen from inside the company, by their own employees
 and this could be prevented using policies defined in an ISMS.
\end_layout

\begin_layout Standard
As touched on in the introduction, a different method to prevent security
 issues is to design software to be secure form the ground up.
 This is known by several different names, such as 
\begin_inset Quotes eld
\end_inset

Secure by design
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "Secure-by-design"

\end_inset

, 
\begin_inset Quotes eld
\end_inset

Secure programming
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

Defensive programming
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "Defensive-programming"

\end_inset

.
 The idea is using good programming practices that would prevent situations
 where bugs related to security could occur.
 This would require a programmer to be highly familiar with the programming
 language that is being used to develop with, in order to recognize situations
 where faulty programming techniques could lead to potentially vulnerable
 systems.
\end_layout

\begin_layout Subsection
Standards
\end_layout

\begin_layout Standard
As mentioned in the section above, ISMS is an approach to security management.
 This practice was in 2005 implemented in the ISO/IEC 27001 standard 
\begin_inset CommandInset citation
LatexCommand cite
key "ISO27001:2005"

\end_inset

, which is covering cyber security related issues.
 This standard was in 2013 canceled with the publication of the ISO/IEC
 27001:2013 standard 
\begin_inset CommandInset citation
LatexCommand cite
key "ISO27001:2013"

\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "ISO27001"

\end_inset

.
 The newest revision changed some of its controls to better support newer
 technologies like Cloud Computing.
 The 27001 standard focuses on management, providing with a set of requirements
 to properly assess a company's risks and how to prevent them in a step-by-step
 process 
\begin_inset CommandInset citation
LatexCommand cite
key "ISO27001-summary"

\end_inset

.
\end_layout

\begin_layout Standard
The real benefits of these standards is, with a proof of certification,
 customers can be sure that a company is using proper practices to make
 sure that their sensitive information is secure from external and internal
 threats.
\end_layout

\begin_layout Standard
One of the older guides for security related standards is the 
\begin_inset Quotes eld
\end_inset

Standard of Good Practice
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "SoGP"

\end_inset

, published by the Information Security Forum (ISF).
 While it says standard in the name, it is a guide providing information
 on identifying and managing security risks.
 In 2011, SoGP was updated to make it cover the requirements for an ISMS
 that was set out in the ISO 27001 standard.
\end_layout

\begin_layout Standard
More related to software development is an organization known as 
\begin_inset Quotes eld
\end_inset

The Open Web Application Security Project
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "Owasp"

\end_inset

.
 OWASP provides a platform for anyone to read and create security related
 articles, documentation and more.
 In 2008 they published their first standard, namely the Application Security
 Verification Standard (ASVS) that provide requirements for measuring what
 degree of trust that can be placed in a web application.
\end_layout

\begin_layout Subsection
Tool Support for Security Analysis
\end_layout

\begin_layout Standard
In the introduction we briefly mentioned software companies like Norton
 and Avast.
 They provide both companies and private persons with security tools like
 firewall applications and anti-virus software.
 These are tools that provide protection against security breaches via for
 example applications with security holes, visiting web sites with malicious
 intents, out of date firmware on network routers or the operating system
 itself.
\end_layout

\begin_layout Standard
Software companies have been creating tools to monitor and manage risks.
 One of these is a software called STREAM 
\begin_inset CommandInset citation
LatexCommand cite
key "STREAM"

\end_inset

, created by Acuity Risk Management.
 By feeding it various information regarding the company and its structure,
 it could output risks analysis relevant to the standards spoken of in the
 section above.
 To help this process further, they also created an application that would
 monitor the information provided to STREAM and automatically report the
 compliance with specifically the ISO/IEC 27001 standard.
 
\end_layout

\begin_layout Standard
Vigilant Software have created a software named vsRisk 
\begin_inset CommandInset citation
LatexCommand cite
key "vsRisk"

\end_inset

 that lets the user input various information about their company such as
 asset owners, risk assessments, threats and more.
 This tool then use this data to create different reports that helps companies
 to comply with the requirements in the ISO/IEC 27001 standard.
\end_layout

\begin_layout Subsection
Gap
\end_layout

\begin_layout Standard
These tools provide ways to ensure the correct policies are in place to
 comply with requirements found in the ISO 27001 standard.
 They focus on providing the right foundations for companies, while ignoring
 aspects surrounding software development.
 While this falls naturally, seeing how the standards focus is on management,
 there is potential for a software that would use the requirements found
 in these standards and combine them with a software development specification,
 creating a list of potential security issues that would not comply with
 these requirements.
 By following an already specified standard such as the ISO 27001 or the
 ASVS, potential users of such a software could then inform their customers
 that the applications they are using have been following the guidelines
 of a known security standard, ensuring that the application is safe to
 use.
\end_layout

\begin_layout Standard
ASVS in particular provides a good foundation for such a software, as its
 focus is on web applications and not management as in the 27001 standard.
 In the following sections, we will discuss what such a software could look
 like, and what it would take to consider it a success.
\end_layout

\begin_layout Section
Objective of the Thesis
\end_layout

\begin_layout Standard
How can we best design an application, hereby referred to as SecuritySoftware,
 to solve the needs we've highlighted so far.
 There is a need for a process to handle these, and the software to implement
 that process.
 The goal for SecuritySoftware is to provide developers with a tool to help
 plan for features that are secure against external threats like attacks
 through security holes, viruses and poor programming solutions (an example
 would be using Statements 
\begin_inset CommandInset citation
LatexCommand cite
key "Statement"

\end_inset

 instead of PreparedStatement 
\begin_inset CommandInset citation
LatexCommand cite
key "PreparedStatement"

\end_inset

).
 This software has to be usable by an end user and consist of the following
 main features:
\end_layout

\begin_layout Itemize
Comprehensible
\end_layout

\begin_layout Itemize
Usefulness
\end_layout

\begin_layout Itemize
Acceptable coverage on security issues
\end_layout

\begin_layout Itemize
Resource efficient
\end_layout

\begin_layout Itemize
Scalability in relation to software architecture size
\end_layout

\begin_layout Paragraph
Comprehensible
\end_layout

\begin_layout Standard
SecuritySoftware will be designed to let a system architect use it without
 requiring assistance from a consultant already familiar with the application
 or other security related programs.
 Each step in the process needs to be understandable, and flow organically
 from the previous step.
 Meaning, should step 1 list information about the clients software, then
 step 2 would use this information to build on.
\end_layout

\begin_layout Paragraph
Usefulness
\end_layout

\begin_layout Standard
Determining whether or not something is useful is often decided by the end
 user.
 The goal for SecuritySoftware is to provide a service that would analyse
 a software specification and provide a list of possible security risks
 and the measures that has to be taken.
 Making sure that it stays updated with the latest issues and solutions
 is of utmost importance to make sure it stays useful.
\end_layout

\begin_layout Paragraph
Coverage
\end_layout

\begin_layout Standard
Security issues are constantly being discovered, and the correct measures
 that have to be taken to prevent them.
 For SecuritySoftware to provide an acceptable coverage, the application
 has to be easily updated to stay relevant.
 There will always be issues that have not been discovered yet, but as long
 as the database providing information is being maintained, SecuritySoftware
 should be able to keep up with the discovery of new security issues and
 the measures that has to be taken.
\end_layout

\begin_layout Paragraph
Resource efficiency
\end_layout

\begin_layout Standard
Slow and inefficient applications are one of the more annoying problems
 for software developmers.
 Being held back by the software itself is a waste of time that might not
 wasteable.
 SecuritySoftware aims to provide a service that will run efficient on modern
 computers, and let the user be the possible bottleneck, and not the system
 itself.
 
\end_layout

\begin_layout Paragraph
Scalability
\end_layout

\begin_layout Standard
As highlighted in the background information, there are services provided
 that are unreachable for smaller companies because of cost.
 SecuritySoftware will aim to be usable for both large scale architectures
 and smaller sized projects.
 This will make it available for both large and small software development
 teams.
\end_layout

\begin_layout Subsection
Artifacts
\end_layout

\begin_layout Standard
SecuritySoftware will consist of two artifacts.
 The software itself, and the process description for an end user.
 This process description is the step-by-step process encountered when a
 software architect uses SecuritySoftware.
\end_layout

\begin_layout Section
Stakeholders
\end_layout

\begin_layout Standard
There are three main stakeholders of interest in relation to SecuritySoftware:
 
\end_layout

\begin_layout Itemize
A system architect (the end user)
\end_layout

\begin_layout Itemize
Maintenance developer
\end_layout

\begin_layout Itemize
Management.
\end_layout

\begin_layout Paragraph
System Architect
\end_layout

\begin_layout Standard
The end user of SecuritySoftware is called a system architect.
 When the software reaches a useable state, the system architect would be
 able to use the program to analysis a system specification.
 In it's current iteration, there are no plans for requiring a consultant
 to provide assistance with the process.
\end_layout

\begin_layout Paragraph
Maintenance Developer
\end_layout

\begin_layout Standard
For SecuritySoftware to stay relevant in an ever changing software development
 world, the system needs to be updated regulary.
 A maintenance developer would update the database with the latest information
 regarding security leaks, measures and other relevant information.
 Other responsibilities such as keeping the software bug free and usable
 on newer hardware, also falls to the maintenance developer.
 
\end_layout

\begin_layout Paragraph
Operation
\end_layout

\begin_layout Standard
SecuritySoftware gets all its information from a database, and this database
 has to stay online and be maintained regulary.
 This is the managements responsibility.
\end_layout

\begin_layout Section
Success Criteria
\end_layout

\begin_layout Standard
In light of the stakeholders, we will highlight what their needs are and
 define some criteria that will be used when evaluating whether or not our
 artifacts were a success.
\end_layout

\begin_layout Subsection
Interests
\end_layout

\begin_layout Standard
Each stakeholders interests are different.
 In other words, the criteria for success vary for each one.
 Below is an overview of the interests each stakeholders has, as well as
 a short description explaining each point.
\end_layout

\begin_layout Subsubsection
System Architect
\end_layout

\begin_layout Standard
A System architect has the following interests:
\end_layout

\begin_layout Itemize
Comprehensible
\end_layout

\begin_layout Itemize
Usefulness
\end_layout

\begin_layout Itemize
Acceptable coverage on security issues
\end_layout

\begin_layout Itemize
Resource efficient
\end_layout

\begin_layout Itemize
Scalability in relation to software architecture size
\end_layout

\begin_layout Standard
For a more detailed explanation, please refer to section 3.
\end_layout

\begin_layout Subsubsection
Maintenance Developer
\end_layout

\begin_layout Standard
A maintenance developer has the following interests:
\end_layout

\begin_layout Itemize
Easy database access
\end_layout

\begin_layout Itemize
Modularity
\end_layout

\begin_layout Paragraph
Database access
\end_layout

\begin_layout Standard
One of the main responsibilities for a maintenance developer is to make
 sure the database is constantly being updated with new information regarding
 security issues and measures.
 Instead of updating the database manually via for example SQL, SecuritySoftware
 will support this natively.
 Adding information to the database is a seperate feature of the application,
 alongside the security process itself.
\end_layout

\begin_layout Paragraph
Modularity
\end_layout

\begin_layout Standard
New issues and measures might require new features in SecuritySoftware.
 To make implementing new features as easy as possible, SecuritySoftware
 should be developed with modules, meaning that you could update one part
 of the system without touching other features.
 This would also make it easier for maintenance developers to troubleshoot
 features that aren't working or have known bugs.
\end_layout

\begin_layout Subsubsection
Operation
\end_layout

\begin_layout Standard
Operation has the following interests:
\end_layout

\begin_layout Itemize
Database based on modern solutions
\end_layout

\begin_layout Paragraph
Database
\end_layout

\begin_layout Standard
Operations only responsibility is to make sure the database is up and running.
 Most of that lies within operation itself.
 Making sure that the database is running on a solid server is outside the
 bounds of SecuritySoftwares responsibility, but making sure that the database
 itself is using a modern solution like MySQL or Oracle are 
\begin_inset CommandInset citation
LatexCommand cite
key "Oracle"

\end_inset

.
 
\end_layout

\begin_layout Subsection
Success Criteria
\end_layout

\begin_layout Standard
Based on the interests of each stakeholder, a set of success criteria for
 each artifact (listed in section 3.1) is listed below:
\end_layout

\begin_layout Subsubsection
Artifact 1 - SecuritySoftware
\end_layout

\begin_layout Standard
For SecuritySoftware to be considered a success, the following criteria
 has to be met:
\end_layout

\begin_layout Enumerate
the application is easy to use and require no prior knowledge surrounding
 security related application
\end_layout

\begin_layout Enumerate
the application is providing security related coverage for both large and
 small architectures
\end_layout

\begin_layout Enumerate
the application is implemented in a way to allow updates and bug fixes without
 compromising the functionality of the software
\end_layout

\begin_layout Enumerate
the application's knowledgebase is updated continously to make sure SecuritySoft
ware stay relevant and useful
\end_layout

\begin_layout Enumerate
the application's knowledgebase is easily updated to cover criteria number
 4
\end_layout

\begin_layout Subsubsection
Artifact 2 - End User Process Description
\end_layout

\begin_layout Standard
For the end user process description to be considered a success...
\end_layout

\begin_layout Enumerate
the process has to be logical and easily understandable
\end_layout

\begin_layout Enumerate
the process has to be precise
\end_layout

\begin_layout Enumerate
the process has to be time efficient
\end_layout

\begin_layout Section
Research Method
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename research-method.png
	width 25page%
	height 35page%
	keepAspectRatio

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Research methods
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Software development and theses use the same approach from inception to
 completion.
 See Figure 1 for an overview of this approach.
 When needs arise for something new, a theory or an idea is presented.
 This idea is then built on, either via scientific findings for a thesis
 or computer programming for an application.
 At some point, evalution is needed.
 There are different methods for evalution, such as field studies, surveys
 or even experiments in a laboratory.
 When evulation has completed, the cycle repeats itself.
 In light of the results, the idea or theory might need modification, which
 is then built on with new findings or different programming methods.
 
\end_layout

\begin_layout Standard
SecuritySoftware and the process description will live through this cycle,
 and will see changes from its inception to finalization through several
 iterations.
\end_layout

\begin_layout Subsection
Innovation
\end_layout

\begin_layout Standard
As presented in section 3.1, there are two artifacts for this thesis.
 SecuritySoftware, and the end user process description.
 While the software itself is important, the real backbone is the process
 description itself.
 
\end_layout

\begin_layout Subsubsection
Process Description
\end_layout

\begin_layout Standard
The process description is a 4 step process where the user starts with a
 software specification and end up with a list of security issues and the
 measures that has to be taken to prevent them.
 The first step is where the end user lists all relevant clients the specificed
 system is going to be used on.
 Examples include iOS, Android, web browsers etc.
 After this step has been completed, the user is asked to specify how the
 server side will look like.
 Third step involve listing the features that this system will provide,
 and how these features communicate from the client to the server.
\end_layout

\begin_layout Standard
Once these 3 steps have been completed, the analysis steps in.
 By combining the information provided in the previous steps and using this
 to query the SecuritySoftware database.
 This step is automated by the software running the process, meaning the
 user will have no control over how the analysis is performed.
\end_layout

\begin_layout Subsubsection
The Software
\end_layout

\begin_layout Standard
SecuritySoftware will provide the user with a graphical user interface (GUI)
 that will help guiding through the each step in the process.
 Maintenance developers will download a seperate version of the application,
 to gain access to the special features regarding updating the database.
 Along the way, helpful information will be provided to make the process
 as easy and as smooth as possible.
 
\end_layout

\begin_layout Subsubsection
Artifacts Combined
\end_layout

\begin_layout Standard
When a user works with SecuritySoftware, both artifacts are in play.
 Each step presented in the application is a step in the process.
 SecuritySoftware will allow the end user to go back and forth between steps
 if needed, making it easier to change up the specification should it be
 needed.
\end_layout

\begin_layout Subsection
Evalution
\end_layout

\begin_layout Standard
Evalutating a software is one of the major aspects of development.
 Unknown issues, weird graphical solutions and awkward language could slip
 unnoticed for the development team that are focused on the development
 itself.
 For SecuritySoftware and the process description, the best way to evaluate
 would be through a field study.
 This would provide the precision and realism to help fine tuning both the
 process, and the software itself.
 A way to go about this, would be to provide a number of people with a copy
 of the software and giving them a task to complete.
 Because all subjects are working on the same problem, more issues would
 arise from the various mindsets each end user have when going through the
 step-by-step process.
\end_layout

\begin_layout Subsection
Select the Appropiate Research Method
\end_layout

\begin_layout Standard
The reasoning behind choosing a field study, is because it provides the
 realism needed to properly evalute the performance of the software and
 if the process is natural for a system architect to use.
 Another possiblity would be to use a survey, asking test subjects whether
 or not they would be interested in using the services provided by SecuritySoftw
are.
 Problem with this is that the results would be subjective.
 Each test subject have different ideas behind the best way of doing things,
 and might not agree with the theory that the software is built on.
 General evalution methods like surveys are avoided, because SecuritySoftware
 is a tool that is very specific in its target audience, and a study would
 provide better, more accurate results in a realistic environment.
 A field study could change the opinions of these, by letting them try it
 and experience the results it provides.
 
\end_layout

\begin_layout Section
Research Plan
\end_layout

\begin_layout Standard
Below is an overview of the planned milestones of this project, and their
 expected dates.
 The thesis itself is continously worked on during each phase.
\end_layout

\begin_layout Subsection
Phase 1 - Process description 
\end_layout

\begin_layout Standard
Before any form of implementation or design can be done, the end user process
 description itself has to be completed.
 A document describing each step encountered in the software will be written.
 
\end_layout

\begin_layout Standard

\series bold
Expected date of completion: August 15th, 2014.
\end_layout

\begin_layout Subsection
Phase 2 - SecuritySoftware Design document
\end_layout

\begin_layout Standard
After the first version of the process description is done, a design document
 highlighting how SecuritySoftware will be implemented and what technologies
 will be used is needed.
\end_layout

\begin_layout Standard

\series bold
Expected date of completion: September 15th, 2014.
\end_layout

\begin_layout Subsection
Phase 3 - Implementing SecuritySoftware
\end_layout

\begin_layout Standard
Implementing the software itself is a long and drawn out process, that will
 change numerours times during the course of the thesis.
 A first prototype version of the software will be made.
 
\end_layout

\begin_layout Standard

\series bold
Expected date of completion: December, 1st 2014.
\end_layout

\begin_layout Subsection
Phase 4 - Evaluate Process Description and Design Document
\end_layout

\begin_layout Standard
There are bound to be problems with either the design or the process that
 will arise during the implementation phase.
 After phase 3 has completed, a proper evalution is needed to prepare for
 the next implementation phase.
 
\end_layout

\begin_layout Standard

\series bold
Expected date of completion: December 1st, 2014.
\end_layout

\begin_layout Subsection
Phase 5 - Second Implementation of SecuritySoftware
\end_layout

\begin_layout Standard
The second implementation phase will begin right after the re-evulation
 has completed.
 This is the planned last phase of implementation, and therefore where SecurityS
oftware will reach its final version.
 
\end_layout

\begin_layout Standard

\series bold
Expected date of completion: January 15th, 2015
\end_layout

\begin_layout Subsection
Phase 6 - Re-evaluation
\end_layout

\begin_layout Standard
After implementation has completed, a re-evalution according to section
 6.2 is needed to verify if the success criteria has been met.
 
\end_layout

\begin_layout Standard

\series bold
Expected date of completion: March 1st 2015
\end_layout

\begin_layout Subsection
Phase 7 - Finalizing Thesis
\end_layout

\begin_layout Standard
The last phase is finishing the thesis.
\end_layout

\begin_layout Standard

\series bold
Expected date of delivery: May 1st, 2015.
\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout Standard
As seen in the background information, there is an opportunity for a new
 kind of software to emerge on the development market.
 A lightweight, cheap and easy to use software for security related issues.
 Where other solutions provide features to help during development or after,
 SecuritySoftware aims to target issues earlier in the planning phase.
 As a cost-benefit analysis is crucial during the making of software specificati
ons, or creating use-case diagrams, the features provided by SecuritySoftware
 could be an asset to go along these.
 For a year long thesis, there is not much time to develop a fully functional
 software that would hit the market upon release.
 But, the discussion, results and evalutions found in the eventual thesis
 could provide the foundations for an idea and a prototype that could be
 developed further.
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Avast"

\end_inset

Avast.com AVAST 2014 | URL: http://www.avast.com/no-no/ [Accessed 16 May.
 2014].
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "ASyncTask"

\end_inset

Website AsyncTask | URL: http://developer.android.com/reference/android/os/AsyncTa
sk.html [Accessed 16 May.
 2014].
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Service"

\end_inset

Website Service (Java EE 6 ) | URL: http://docs.oracle.com/javaee/6/api/javax/xml/
ws/Service.html [Accessed 16 May.
 2014].
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "McAfee"

\end_inset

Website McAfee | URL: http://www.mcafee.com/no/ [Accessed 16 May.
 2014].
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Norton"

\end_inset

Website No.norton.com | URL: http://no.norton.com/ [Accessed 16 May.
 2014].
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "PreparedStatement"

\end_inset

PreparedStatement (Java Platform SE 7 ) | URL: http://docs.oracle.com/javase/7/doc
s/api/java/sql/PreparedStatement.html [Accessed 21 May.
 2014].
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Statement"

\end_inset

Docs.oracle.com Statement (Java Platform SE 7 ) | URL: http://docs.oracle.com/javase
/7/docs/api/java/sql/Statement.html [Accessed 21 May.
 2014].
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Version Control"

\end_inset

Oss-watch.ac.uk What is version control? | URL: http://oss-watch.ac.uk/resources/ver
sioncontrol [Accessed 22 May.
 2014].
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Github"

\end_inset

Build software better, together In-text: (GitHub, 2014) | URL: https://github.com
/about [Accessed 22 May.
 2014].
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Microsoft"

\end_inset

Microsoft.com Microsoft Security Development Lifecycle URL: https://www.microsoft.c
om/security/sdl/default.aspx [Accessed 23 May.
 2014].
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "AppSec"

\end_inset

 AppSec Counsulting | URL: https://www.appsecconsulting.com/Application-Security/a
pplication-security-program-development/menu-id-62.html [Accessed 21 May.
 2014]
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Consulting-1"

\end_inset

How To Set Your Consulting Fees | URL: http://www.forbes.com/2006/11/06/bostoncons
ulting-marsh-mckinsey-ent-fin-cx_mc_1106pricing.html [Accessed 23 May.
 2014].
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Consulting-2"

\end_inset

Startmyconsultingbusiness.com How to set your hourly consulting rate | URL:
 http://startmyconsultingbusiness.com/how-to-set-your-rate/ [Accessed 23
 May.
 2014].
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Consulting-3"

\end_inset

Forbes Low Consulting Rates Leave Accenture High And Dry | URL: http://www.forbes.
com/sites/greatspeculations/2011/02/14/low-consulting-rates-leave-accenture-high
-and-dry/ [Accessed 23 May.
 2014].
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Oracle"

\end_inset

Oracle.com Oracle Database 12c - Plug into the Cloud | URL: http://www.oracle.com/u
s/products/database/overview/index.html [Accessed 29 May.
 2014].
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "ISMS"

\end_inset

En.wikipedia.org Wikipedia Information Security Management System - Wikipedia,
 the free encyclopedia | URL: http://en.wikipedia.org/wiki/Information_security_ma
nagement_system [Accessed 5 June.
 2014].
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "ISO27001:2005"

\end_inset

En.wikipedia.org ISO/IEC 27001:2005 - Wikipedia, the free encyclopedia | URL:
 http://en.wikipedia.org/wiki/ISO/IEC_27001:2005 [Accessed 5 June.
 2014].
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "ISO27001"

\end_inset

Iso.org ISO/IEC 27001 - Information Security Management | URL: http://www.iso.org/i
so/home/standards/management-standards/iso27001.htm [Accessed 5 June.
 2014].
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Secure-by-design"

\end_inset

En.wikipedia.org Secure by design - Wikipedia, the free encyclopedia | URL:
 http://en.wikipedia.org/wiki/Secure_by_design [Accessed 6 Jun.
 2014].
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Defensive-programming"

\end_inset

En.wikipedia.org Defensive programming - Wikipedia, the free encyclopedia
 | URL: http://en.wikipedia.org/wiki/Defensive_programming [Accessed 6 Jun.
 2014].
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "ISO27001:2013"

\end_inset

En.wikipedia.org ISO/IEC 27001:2013 - Wikipedia, the free encyclopedia | URL:
 http://en.wikipedia.org/wiki/ISO/IEC_27001:2013 [Accessed 6 Jun.
 2014].
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "ISO27001-cloud"

\end_inset

DNV BA Information Center Security updates: The upcoming revision of ISO/IEC
 27001 | URL: http://www.isocertificationuk.co.uk/blog/2013/03/14/security-updates-
the-upcoming-revision-of-isoiec-27001/ [Accessed 6 Jun.
 2014].
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "ISO27001-summary"

\end_inset

Praxiom.com ISO IEC 27001 2013 Translated into Plain English In-text: (Praxiom.com
, 2013) Bibliography: Praxiom.com, (2013).
 ISO IEC 27001 2013 Translated into Plain English.
 [online] Available at: http://www.praxiom.com/iso-27001.htm [Accessed 6 Jun.
 2014].
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "SoGP"

\end_inset

En.wikipedia.org Standard of Good Practice - Wikipedia, the free encyclopedia
 | URL: http://en.wikipedia.org/wiki/Standard_of_Good_Practice [Accessed 6
 Jun.
 2014].
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Cyber-standards"

\end_inset

En.wikipedia.org Cyber security standards - Wikipedia, the free encyclopedia
 | URL: http://en.wikipedia.org/wiki/Cyber_security_standards [Accessed 6
 Jun.
 2014].
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "STREAM"

\end_inset

Acuityrm.com Software for Risk Management | URL: http://www.acuityrm.com/products
 [Accessed 6 Jun.
 2014].
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "vsRisk"

\end_inset

Vigilantsoftware.co.uk vsRisk Standalone – Basic URL: http://www.vigilantsoftware.co.
uk/p-203-vsrisk-standalone-basic.aspx [Accessed 6 Jun.
 2014].
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Owasp"

\end_inset

Owasp.org OWASP | URL: https://www.owasp.org/index.php/Main_Page [Accessed 6
 Jun.
 2014].
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "ASVS"

\end_inset

Owasp.org Category:OWASP Application Security Verification Standard Project
 | URL: https://www.owasp.org/index.php/ASVS [Accessed 6 Jun.
 2014].
\end_layout

\end_body
\end_document
