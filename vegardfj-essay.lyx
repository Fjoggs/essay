#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
Front Page
\begin_inset Newpage newpage
\end_inset


\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
Software development has evolved from something you'd do in your garage
 after work, to the backbone of society.
 This growth has spawned numerous companies, and in turn increased the need
 for structure, planning and working methods that can provide results, regardele
ss of project size.
\end_layout

\begin_layout Standard
Sometimes during the 90s, a new phenomena was gaining momentum.
 The internet, originally a project developed by the US Army had gained
 traction within the general public, and with it came all its glory and
 all its horrors.
 Some of the glory it brought was easier access to ideas and discussion
 around developing software.
 Methods like Scrum and tools like UML made planning and execution easier
 [CHECK WHEN UML AND SCRUM APPEARED].
 On the horror side, the same way people spread and shared ideas for good,
 they were shared for bad.
 Persons with bad intents creating trojan horses and computer worms were
 ever increasing, and security related issues are still as hot as ever.
 And yet, security is still mostly on an 
\begin_inset Quotes eld
\end_inset

it's broken, time to fix it
\begin_inset Quotes erd
\end_inset

-basis instead of planning out how to design and implement your applications
 properly with security related issues in mind.
 In this paper we'll take a look at a possible implementation of an application
 that would try to solve this.
 
\end_layout

\begin_layout Section
Background
\end_layout

\begin_layout Section
Thesis Statement
\end_layout

\begin_layout Standard
In light of the background information, how can we best design an application,
 hereby referred to as SecuritySoftware, to solve the needs we've highlighted
 so far? In short, our application has to answer the statement: 
\shape italic
how can we create an application that would highlight security issues early
 in the planning phase, and integrate this as good as possible with already
 existing specification related methods.
\end_layout

\begin_layout Standard
We will discuss in the success criterias how to implement this in a way
 that would let our application become an asset to the planning phase of
 software-related development projects.
 
\end_layout

\begin_layout Subsection
Research Questions
\end_layout

\begin_layout Standard
We define the research questions for our paper.
 We will use these questions in our thesis as a guideline for the direction
 of the project.
 
\end_layout

\begin_layout Quote

\shape italic
\begin_inset Quotes eld
\end_inset

How can security-issues related to software become a core part of the planning
 phase during development?
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Quote

\shape italic
\begin_inset Quotes eld
\end_inset

How can we best implement an application to fit the current planning processes
 relevant to software- and specification-planning?
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Subsection
Success Criterias
\end_layout

\begin_layout Subsubsection
General Criterias
\end_layout

\begin_layout Standard
In order to best realize our goal, we need to set some criterias for success;
 what do we define as a success, and how can we achieve it.
 For SecuritySoftware to be considered a success, several variables have
 to be met.
 For software developers, important functions for an application is responsivene
ss, cross-platform support and easy to use.
 These are all general sucess criterias that are 
\begin_inset Quotes eld
\end_inset

self-explanatory
\begin_inset Quotes erd
\end_inset

.
 Responsiveness is important, because when you're developing software, you
 do not want to be slowed down because the applications you are using is
 not working fluently, or keeping up with your speed.
 Cross-platform has become ever more important with the rise of Apples iMacs.
 More and more people use 
\begin_inset Quotes eld
\end_inset

Mac's
\begin_inset Quotes erd
\end_inset

 to develop software, but there's also a large userbase that works on Linux.
 Windows also have a large userbase, and supporting them is pretty much
 mandatory and this day and age.
 Easy to use is subjective, but SecuritySoftware shouldn't require any form
 of extensive programming knowledge or certifications in security.
\end_layout

\begin_layout Subsubsection
SecuritySoftware Specific Criterias
\end_layout

\begin_layout Standard
For SecuritySoftware to be considered a success, the following criterias
 has to be met:
\end_layout

\begin_layout Quote

\shape italic
\begin_inset Quotes eld
\end_inset

SecuritySoftware's database has to be easily updated for the program to
 stay relevant.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Quote

\shape italic
\begin_inset Quotes eld
\end_inset

SecuritySoftware should require no former knowledge regarding security or
 programming.
\begin_inset Quotes eld
\end_inset


\end_layout

\begin_layout Section
System breakdown
\end_layout

\begin_layout Standard
SecuritySoftware's two main components is the progam itself, and a database
 containing all the information regarding securty issues, and their correspondin
g solution.
 (Or lack thereof) The database will be located online, meaning SecuritySoftware
 will not be useful to someone without internet access.
 Possible feature to allow a user to download the database locally is a
 potential fix for this, but considering how often issues are discovered
 and how quick fixes for this can be discovered, this is a sub-par solution.
 In this day and age, it's almost impossible to develop software without
 an internet connection.
 Therefore, requiring an internet connection should not be a big problem.
\end_layout

\begin_layout Standard
SecuritySoftware will consist of 4 different steps, each one dependant on
 the one beforehand.
 (apart from step 1) The user will be guided through each step, and if needed,
 can jump back to a previous step to change, add or remove information.
 
\end_layout

\begin_layout Subsection
Step By Step Explanation
\end_layout

\begin_layout Standard
Below we'll list the rundown of each step you'll encounter when running
 SecuritySoftware, and what you need to do to complete each one.
\end_layout

\begin_layout Subsubsection
Step 1 - Client Side Information
\end_layout

\begin_layout Standard
The first step a user of SecuritySoftware has to complete, is to list what
 kind of technology the client will be running to use the application that
 is going to be created.
 The reason for this is that each system has its own strengths and weaknesses
 when it comes to security, and certain flaws will only be present with
 a specific system.
 The user is presented by several checkboxes, each listing a system that
 they could choose to include in their analysis.
 Examples include iOS, Android, Web browsers on Windows 8 etc.
 
\end_layout

\begin_layout Subsubsection
Step 2 - Listing Features
\end_layout

\begin_layout Standard
The next step is perhaps the most crucial.
 For SecuritySoftware to be of any use, it needs to know what features you
 are planning to offer with your application.
 Without features, security wouldn't be an issue! Here the user will be
 presented with a search box, along with a list of commonly used features.
 The search box will be updated as you type, meaning if you're looking for
 authentication, it would show up while typing 
\begin_inset Quotes eld
\end_inset

auth
\begin_inset Quotes erd
\end_inset

.
 Each feature will also be applied a 
\begin_inset Quotes eld
\end_inset

tag
\begin_inset Quotes erd
\end_inset

, meaning someone could search for 
\begin_inset Quotes eld
\end_inset

Log In
\begin_inset Quotes erd
\end_inset

 and they would be able to select 
\begin_inset Quotes eld
\end_inset

Authentication.
\begin_inset Quotes erd
\end_inset

 
\end_layout

\begin_layout Subsubsection
Step 3 - Server Side Information
\end_layout

\begin_layout Standard
The last step SecuritySoftware needs from the user, is information on how
 the server side will look like.
 Smaller systems might not need a database to handle authentication, and
 the issues would therefore be different.
 When you add a server to this step, you'll be asked to list what this server
 will handle for each feature.
 If you have a database, and you want your users credentials to be stored
 on the database, then the user would list this after adding the database.
 This means that SecuritySoftware would know that your database contains
 highly sensitive information, and you need to safely store it in some way
 in case of a security breach.
\end_layout

\begin_layout Subsubsection
Final Step - The Analysis
\end_layout

\begin_layout Standard
Until now, SecuritySoftware hasn't really done anything.
 It's just asked the user to list the information about how the system is
 constructed.
 The real meat of the application is when the analysis comes in.
 
\end_layout

\begin_layout Standard
So how does the analysis work? SecuritySoftware relies on a database of
 information.
 This database is constructed with several tables.
 There's a table for each step, a table containing issues and a table containing
 solutions.
 SecuritySoftware then creates an SQL request containing 1 client and 1
 feature.
 (An example would be (pseudocode): select from issues where client=client
 & feature=feature) Then it would fetch all corresponding solutions to this
 issue.
 After all clients have been analised, it will check each the feature+server
 combinations.
\end_layout

\begin_layout Subsection
Example Runthrough
\end_layout

\begin_layout Standard
To show what a runthrough with SecuritySoftware would look like, we'll guide
 you through it step-by-step.
 The system is an information application to be used in hospitals, mainly
 targeting mobile operating systems, but also webbrowsers on PCs.
 It will support a chat system, letting you send instant messages to customer
 support if needed.
 This feature will require you to log in, meaning authentication has to
 be in place.
 This system is hereby reffered to as HospitalApplication.
\end_layout

\begin_layout Subsubsection
Step 1 - Clients
\end_layout

\begin_layout Standard
HospitalApplication is a system that will be run on both Android systems,
 Apple systems and regular PCs.
 
\end_layout

\begin_layout Standard
We start with Apple first.
 Our software will run on mobile devices, both cellphones and tablets/pads.
 This means we'll choose iOS 7 from the list.
 Most of the time, you'll always choose the latest version of a client,
 but in some cases you might want to target phones that can't run the latest
 versions, meaning if you want to support more, you have to intentionally
 release it on lower versions.
 We would therefore list this aswell.
 
\end_layout

\begin_layout Standard
Next up is Android.
 To make it easier to follow, we'll simply add support for the latest version,
 which is 4.4.2 KitKat.
 This will allow our application to run on both cellphones and tablets supported
 by this version.
\end_layout

\begin_layout Standard
Both Apple and Android have mobile web browsers, and because we're creating
 an application that's also accessable via web-browsers, we need to let
 SecuritySoftware know this by checking an option that says 
\begin_inset Quotes eld
\end_inset

Include mobile web-browsers
\begin_inset Quotes erd
\end_inset

 when adding Android and iOS to our list.
\end_layout

\begin_layout Standard
Last we add support for web-browsers run from PCs.
 See Table 1 for an overview of what this would look like.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Version
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Additional Options
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
X For Yes
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
iOS 7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Include mobile web-browsers?
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
X
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
iOS 6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Include mobile web-browsers?
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
X
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Android 4.4 KitKat
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Include mobile web-browsers?
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
X
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
PC Web Browsers
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Step 1 - Client Information
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Step 2 - Features
\end_layout

\begin_layout Standard
Next up we need to list the features we want our program to support.
 As explained earlier, the ones supported for analysis all exist within
 SecuritySoftware.
 Popular choices show up in a list.
 Authentication is almost standard these days for mobile applications, so
 it shows up in the list of most used features.
 HospitalApplication also supports instant messaging, and we want these
 conversations to be logged, so we need to add a feature for storing logs
 somewhere.
 When the user adds Instant Messaging to the list of features, SecuritySoftware
 will ask if the feature requires a user to be logged in.
 Because we want to log our chats, we need this to be set to true.
 The next step, we'll choose where to store our logs and how these features
 will communicate from the server and to the client.
\end_layout

\begin_layout Standard
List of features: Authentication (Log in, log out) via username and password,
 Instant Messaging, Chat logging of Instant Messaging.
 Please refer to table 2 for an overview of what this could look like.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Features
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Additional Information
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
X For Yes 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Authentication
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Requires a username and a password
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
Default
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Instant messaging
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Require log in?
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
X
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Chat log
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stores chat logs
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
Default
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Feature Information
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Step 3 - Server
\end_layout

\begin_layout Standard
We've reached the step where we list how the client and server will communicate
 with each other for each feature.
 When a client wants to log in to HospitalApplication, he'll enter his credentia
ls.
 This will then be sent to the server, which will ask the database if the
 given credentials match any in the database.
\end_layout

\begin_layout Standard
When a client wants to use the instant messaging service, it will send a
 request and his message to the server, which will then be logged in the
 database.
 The server will then send the message to the correct recipient.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Server Information
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Features
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Web Server
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Authentication, Instant Messaging, Chat log
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Request database
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Database
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Authentication, Instant Messaging, Chat log
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stores information
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Server Information
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Final Step - Analysis
\end_layout

\begin_layout Subsection
Explanation
\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout Section
References
\end_layout

\end_body
\end_document
